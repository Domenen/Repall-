python manage.py shell - откроет консоль проекта, в которой удобно делать миграцию

python manage.py makemigrations - создает файл миграций

python manage.py migrate - приминить миграции

python manage.py runserver - запускает сервер

python manage.py startapp <NAME> - создает приложение, папку с файлами, <NAME> - название приложения

python -m venv <NAME> - создает виртуальное окружение в той директории где находиться, <NAME> название виртуального окуржения

после еще надо активировать  <NAME>\Scripts\activate.bat - из директории где он находиться - deactivate - отключает виртуальное окуржение

django-admin startproject <NAME> - что бы создать проект джанго <NAME> - название проекта

python manage.py sqlmigrate <PAPKA> <NUMBER>

~~~~~~~~~~~~~~~~~~~~~~SHELL~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Book.objects.filter(copy_count=2).exclude(author__country="RU").first().author
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		MVC = MTV

		Model = Model
		View = Template
		Controller = View
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	для создания пути media
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


если DEBAG активен :
if settings.DEBAG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		Создание нового приложения:

1. python manage.py startapp <NAME> 
2. Зарегестрировать это приложение в корне настроек всего проекта django в файле settings.py в "INSTALLED_APPS"
	там прописываем либо название нового приложения, либо прямой путь к нему. к примеру :
		 "news"  или  "news.apps.NewsConfig"  - лучше прямой путь использовать

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		Создание url для функций и классов из приложения:

1. В корне проекта в urls.py                                                                 
2. В нем надо импортивровать нашу функцию или класс из приложения, чтоб он видел файл: 
		""from news.views import index""    - 	news = название приложения 
		 					views = контроллер приложения , где находиться функция  
							index = название функции
3. находим в нем urlpatterns и в нем прописываем: 
		""path('news/', index)""   - news/ = по какой ссылке надо пройти чтоб получить результат функции
					     index = название самой функции

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		Поиск данных в панели Shell

1. импортируем нашу модель - from news.models import News
2. news = News.objects.all()  - теперь news хранит все данные модели и бызы данных
3. for item in news:
	print(item.title)	- будет по строчно выводить title каждой записи базы данных,
					если в моделе класса указана функция __str__

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		Сортировать данные 

1. News.objects.oreder_by('title') - остортирует по title
2. News.objects.oreder_by('-title') - отсортирует по title только в обратном порядке
3. News.objects.filter(pk=4) - так же отсортирует 
4. News.objects.exclude(title="News 5") - выведет все записи, кроме той у которой title="News 5"

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

		Найти определенный

News.objects.get(pk=5) - выдаст конкретную запись из базы
news1 = News.objects.get(pk-=5) - сохранит в news1 данные записи

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~